@page "/filePreview"
@using System.IO;
@using Microsoft.AspNetCore.Components.Forms
@inject HttpClient Http

<h3>File Preview Component</h3>

<span id="exception-message">@exceptionMessage</span>

@if (isLoading)
{
    <p>Loading...</p>
    <br />
}

@foreach (var (file, content) in loadedFiles)
{
    <p id="file-@(file.Name)">
        <strong>Name:</strong> <span id="file-name">@(file.Name)</span><br />
        <strong>Last modified:</strong> <span id="file-last-modified">@(file.LastModified.ToString())</span><br />
        <strong>Size (bytes):</strong> <span id="file-size">@(file.Size)</span><br />
        <strong>Content type:</strong> <span id="file-content-type">@(file.ContentType)</span><br />
        <strong>Content:</strong> <span id="file-content">@content</span><br />
    </p>
}

<h3>Image upload (max 15MB)</h3>

<InputFile OnChange="LoadImage" id="input-image" />
<br />

@if (imageDataUri != null)
{
    <p>
        Uploaded image:<br />
        <img id="image-uploaded" src="@imageDataUri" />
    </p>
}
<button @onclick="RunPython">Process</button>

@if (returnedImageUri != null)
{
    <p>
        Uploaded image:<br />
        <img id="image-processed" src="@returnedImageUri" />
    </p>
}

@if (processingFinished) {
    <p>
        Processed data:
        @data
    </p>
}

@code {
    Dictionary<IBrowserFile, string> loadedFiles = new Dictionary<IBrowserFile, string>();

    long maxFileSize = 1024 * 1024 * 15;

    bool processingFinished = false;

    string data;

    bool isLoading;

    string imageDataUri;

    string imageBase64;

    string returnedImageUri;

    string exceptionMessage;

    private class Request
    {
        public string image { get; set; }
        public string formated { get; set; }
        
    }

    private class Response 
    {
        public string formated {get;set;}
    }


    async Task RunPython(){
        var payload = new Request {image = imageBase64 };
        
        var response = await Http.PostAsJsonAsync("http://localhost:7000/convert/simple",payload);
        returnedImageUri = await response.Content.ReadAsStringAsync();
    }

    async Task LoadImage(InputFileChangeEventArgs e)
    {
        var format = "image/jpeg";
        var imageFile = await e.File.RequestImageFileAsync(format, 640, 480);

        using var fileStream = imageFile.OpenReadStream(maxFileSize);
        using var memoryStream = new MemoryStream();
        await fileStream.CopyToAsync(memoryStream);
        imageBase64 = Convert.ToBase64String(memoryStream.ToArray());
        imageDataUri = $"data:{format};base64,{imageBase64}";
    }
    
}